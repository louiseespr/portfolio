
-- Create schema
CREATE SCHEMA saas_analytics;
USE saas_analytics;

-- Create tables
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    company_name VARCHAR(100),
    industry VARCHAR(50),
    country VARCHAR(50),
    creation_date DATE,
    company_size VARCHAR(20)
);

CREATE TABLE subscriptions (
    subscription_id INT PRIMARY KEY,
    customer_id INT,
    plan_id INT,
    start_date DATE,
    end_date DATE,
    status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE plans (
    plan_id INT PRIMARY KEY,
    plan_name VARCHAR(50),
    monthly_price DECIMAL(10,2),
    features JSON
);

CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    subscription_id INT,
    transaction_date DATE,
    amount DECIMAL(10,2),
    transaction_type VARCHAR(20),
    FOREIGN KEY (subscription_id) REFERENCES subscriptions(subscription_id)
);

-- Sample data insertion
INSERT INTO customers VALUES
    (1, 'TechCorp', 'Technology', 'USA', '2023-01-01', '50-200'),
    (2, 'MediaGroup', 'Media', 'UK', '2023-02-15', '10-50'),
    (3, 'FinanceHub', 'Finance', 'Germany', '2023-03-01', '200-500');

INSERT INTO plans VALUES
    (1, 'Basic', 99.99, '{"storage": "10GB", "users": 5}'),
    (2, 'Pro', 199.99, '{"storage": "50GB", "users": 20}'),
    (3, 'Enterprise', 499.99, '{"storage": "unlimited", "users": "unlimited"}');

-- Key Financial Metrics Analysis

-- 1. Monthly Recurring Revenue (MRR) Calculation
CREATE VIEW monthly_mrr AS
SELECT 
    DATE_FORMAT(transaction_date, '%Y-%m') AS month,
    SUM(amount) as mrr,
    COUNT(DISTINCT subscription_id) as active_subscriptions,
    SUM(amount) / COUNT(DISTINCT subscription_id) as arpu
FROM transactions
WHERE transaction_type = 'recurring'
GROUP BY DATE_FORMAT(transaction_date, '%Y-%m')
ORDER BY month;

-- 2. Customer Acquisition Cost (CAC)
CREATE VIEW customer_acquisition_metrics AS
WITH marketing_costs AS (
    SELECT 
        DATE_FORMAT(transaction_date, '%Y-%m') AS month,
        SUM(amount) as marketing_spend
    FROM transactions 
    WHERE transaction_type = 'marketing'
    GROUP BY DATE_FORMAT(transaction_date, '%Y-%m')
),
new_customers AS (
    SELECT 
        DATE_FORMAT(creation_date, '%Y-%m') AS month,
        COUNT(*) as new_customers
    FROM customers
    GROUP BY DATE_FORMAT(creation_date, '%Y-%m')
)
SELECT 
    m.month,
    m.marketing_spend,
    nc.new_customers,
    m.marketing_spend / NULLIF(nc.new_customers, 0) as cac
FROM marketing_costs m
LEFT JOIN new_customers nc ON m.month = nc.month;

-- 3. Churn Rate Analysis
CREATE VIEW monthly_churn AS
WITH churned_customers AS (
    SELECT 
        DATE_FORMAT(end_date, '%Y-%m') AS month,
        COUNT(*) as churned_count
    FROM subscriptions
    WHERE status = 'cancelled'
    GROUP BY DATE_FORMAT(end_date, '%Y-%m')
),
total_customers AS (
    SELECT 
        DATE_FORMAT(start_date, '%Y-%m') AS month,
        COUNT(*) as total_count
    FROM subscriptions
    WHERE status = 'active'
    GROUP BY DATE_FORMAT(start_date, '%Y-%m')
)
SELECT 
    c.month,
    c.churned_count,
    t.total_count,
    (c.churned_count * 100.0 / NULLIF(t.total_count, 0)) as churn_rate
FROM churned_customers c
LEFT JOIN total_customers t ON c.month = t.month;

-- 4. Revenue Growth and Forecasting
CREATE VIEW revenue_forecast AS
WITH historical_growth AS (
    SELECT 
        month,
        mrr,
        (mrr - LAG(mrr) OVER (ORDER BY month)) / LAG(mrr) OVER (ORDER BY month) * 100 as growth_rate
    FROM monthly_mrr
)
SELECT 
    month,
    mrr,
    growth_rate,
    mrr * POWER(1 + AVG(growth_rate) OVER () / 100, 3) as forecast_3_months,
    mrr * POWER(1 + AVG(growth_rate) OVER () / 100, 6) as forecast_6_months
FROM historical_growth;

-- 5. Burn Rate and Runway Analysis
CREATE VIEW burn_rate_analysis AS
WITH monthly_expenses AS (
    SELECT 
        DATE_FORMAT(transaction_date, '%Y-%m') AS month,
        SUM(CASE WHEN transaction_type = 'expense' THEN amount ELSE 0 END) as expenses,
        SUM(CASE WHEN transaction_type = 'recurring' THEN amount ELSE 0 END) as revenue
    FROM transactions
    GROUP BY DATE_FORMAT(transaction_date, '%Y-%m')
)
SELECT 
    month,
    expenses,
    revenue,
    revenue - expenses as net_burn,
    CASE 
        WHEN expenses > revenue THEN revenue / (expenses - revenue)
        ELSE NULL
    END as runway_months
FROM monthly_expenses;

-- 6. Cohort Analysis
CREATE VIEW cohort_retention AS
WITH cohort_base AS (
    SELECT 
        c.customer_id,
        DATE_FORMAT(c.creation_date, '%Y-%m') as cohort_month,
        DATE_FORMAT(t.transaction_date, '%Y-%m') as activity_month
    FROM customers c
    JOIN subscriptions s ON c.customer_id = s.customer_id
    JOIN transactions t ON s.subscription_id = t.subscription_id
)
SELECT 
    cohort_month,
    activity_month,
    COUNT(DISTINCT customer_id) as active_customers,
    COUNT(DISTINCT customer_id) * 100.0 / 
        FIRST_VALUE(COUNT(DISTINCT customer_id)) OVER (
            PARTITION BY cohort_month 
            ORDER BY activity_month
        ) as retention_rate
FROM cohort_base
GROUP BY cohort_month, activity_month;

-- 7. Fundraising Needs Analysis
CREATE VIEW fundraising_requirements AS
WITH growth_metrics AS (
    SELECT 
        rf.month,
        rf.mrr,
        rf.forecast_6_months,
        ba.expenses,
        ba.net_burn
    FROM revenue_forecast rf
    JOIN burn_rate_analysis ba ON rf.month = ba.month
)
SELECT 
    month,
    mrr,
    forecast_6_months,
    expenses,
    net_burn,
    CASE 
        WHEN net_burn < 0 THEN ABS(net_burn) * 18 -- 18 months runway
        ELSE 0 
    END as recommended_raise
FROM growth_metrics;

-- Example Queries for Analysis

-- 1. Key Growth Metrics Dashboard
SELECT 
    m.month,
    m.mrr,
    m.active_subscriptions,
    c.churn_rate,
    cam.cac,
    ba.net_burn,
    rf.forecast_3_months
FROM monthly_mrr m
JOIN monthly_churn c ON m.month = c.month
JOIN customer_acquisition_metrics cam ON m.month = cam.month
JOIN burn_rate_analysis ba ON m.month = ba.month
JOIN revenue_forecast rf ON m.month = rf.month
ORDER BY m.month DESC
LIMIT 12;

-- 2. Fundraising Analysis Report
SELECT 
    month,
    mrr as current_mrr,
    forecast_6_months as projected_mrr,
    recommended_raise as funding_needed,
    CASE 
        WHEN recommended_raise > 0 THEN 'Fundraising Recommended'
        ELSE 'Sufficient Runway'
    END as funding_status
FROM fundraising_requirements
ORDER BY month DESC
LIMIT 1;

-- 3. Cohort Performance Analysis
SELECT * FROM cohort_retention
WHERE cohort_month >= DATE_FORMAT(DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH), '%Y-%m')
ORDER BY cohort_month, activity_month;
